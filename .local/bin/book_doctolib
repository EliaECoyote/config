#!/usr/bin/env python3

import os
import smtplib
import threading
import webbrowser
from datetime import date, datetime
from email.message import EmailMessage

import requests

API_AVAILABILITIES_URL = "https://partners.doctolib.fr/availabilities.json"
HEADERS = {
    "sec-ch-ua": '"Google Chrome";v="95", "Chromium";v="95", ";Not A Brand";v="99"',
    "accept": "application/json",
    "Referer": "https://www.doctolib.fr/vaccination-covid-19/paris/centre-de-vaccination-paris-19eme",
    "sec-ch-ua-mobile": "?0",
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36",
    "content-type": "application/json; charset=utf-8",
}


def send_mail(
    to_email, subject, message, server="localhost", from_email="monty@python.com"
):
    # import smtplib
    msg = EmailMessage()
    msg["Subject"] = subject
    msg["From"] = from_email
    msg["To"] = ", ".join(to_email)
    msg.set_content(message)
    print(msg)
    server = smtplib.SMTP(server)
    server.set_debuglevel(1)
    server.login(from_email, "password")  # user & password
    server.send_message(msg)
    server.quit()
    print("successfully sent the mail.")


def fetch_and_notify():
    today = date.today()
    params = {
        "start_date": today.strftime("%Y-%m-%d"),  # "2022-11-11",
        "visit_motive_ids": "1799047",
        "agenda_ids": "297282-297400-297285-297290-297392-297402-297384-297288-297287",
        "practice_ids": "117396-117400",
        "telehealth": "false",
        "limit": "5",
    }
    now = datetime.now()
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
    res = requests.get(url=API_AVAILABILITIES_URL, params=params, headers=HEADERS)
    print("fetch triggered at " + dt_string)
    data = res.json()
    if data["total"] > 0:
        print(data)
        os.system(
            """osascript -e 'display notification "availability found at {}" with title "availability found"'""".format(
                dt_string
            )
        )
        os.system('say "doctolib availbility found."')
        browser_link = "https://partners.doctolib.fr/etablissement-de-prevention/paris/centre-de-prevention-et-de-depistage-ridder-mairie-de-paris/booking/availabilities?isNewPatient=true&isNewPatientBlocked=false&motiveIds[]=1799047&placeId=NO_PREFERENCE&practitionerId=NO_PREFERENCE&specialityId=3272&speciality_id=3272&telehealth=false"
        webbrowser.open(browser_link)

        send_mail(
            to_email=["elia.camposilvan@gmail.com"],
            subject="New Doctolib availability",
            message="New appointment available, visit the following link: "
            + browser_link,
        )

        exit(0)
    else:
        print("no availability at " + dt_string)


def set_interval(func, sec):
    def func_wrapper():
        set_interval(func, sec)
        func()

    t = threading.Timer(sec, func_wrapper)
    t.start()
    return t


fetch_and_notify()
set_interval(fetch_and_notify, 60)
