local M = {}

function M.get_background()
  local theme = os.getenv("THEME")
  if (theme == nil or (theme ~= "dark" and theme ~= "light")) then
    return "light"
  end
  return theme
end

function M.extend_hi(group, new_config)
  local hl = vim.api.nvim_get_hl_by_name(group, true)
  vim.api.nvim_set_hl(0, group, vim.tbl_extend("force", hl, new_config))
end

-- Creates a base16 colorscheme using the colors specified.
--
-- @param colors (table) table with keys "base00", "base01", "base02",
--   "base03", "base04", "base05", "base06", "base07", "base08", "base09",
--   "base0A", "base0B", "base0C", "base0D", "base0E", "base0F".
--   Each key should map to a valid 6 digit hex color.
--
-- @framework (cf. https://github.com/chriskempson/base16/blob/main/styling.md)
-- ```txt
-- base00 - Default Background
-- base01 - Lighter Background (Used for status bars, line number and folding marks)
-- base02 - Selection Background
-- base03 - Comments, Invisibles, Line Highlighting
-- base04 - Dark Foreground (Used for status bars)
-- base05 - Default Foreground, Caret, Delimiters, Operators
-- base06 - Light Foreground (Not often used)
-- base07 - Light Background (Not often used)
-- base08 - Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted
-- base09 - Integers, Boolean, Constants, XML Attributes, Markup Link Url
-- base0A - Classes, Markup Bold, Search Text Background
-- base0B - Strings, Inherited Class, Markup Code, Diff Inserted
-- base0C - Support, Regular Expressions, Escape Characters, Markup Quotes, Errors
-- base0D - Functions, Methods, Attribute IDs, Headings
-- base0E - Keywords, Storage, Selector, Markup Italic, Diff Changed
-- base0F - Deprecated, Opening/Closing Embedded Language Tags, e.g. <?php ?>
-- ```
--
-- @example
-- ```lua
-- setup_theme.setup({
--   base00 = "#16161D", base01 = "#2c313c", base02 = "#3e4451", base03 = "#6c7891",
--   base04 = "#565c64", base05 = "#abb2bf", base06 = "#9a9bb3", base07 = "#c5c8e6",
--   base08 = "#e06c75", base09 = "#d19a66", base0A = "#e5c07b", base0B = "#98c379",
--   base0C = "#56b6c2", base0D = "#0184bc", base0E = "#c678dd", base0F = "#a06949",
-- })
-- ```
function M.setup_theme(colors)
  if vim.fn.exists("syntax_on") then
    vim.cmd("syntax reset")
  end

  local hi_config = {
    -- Vim editor highlights
    Normal       = {},
    Bold         = { bold = true },
    Debug        = { fg = colors.base08 },
    Directory    = { fg = colors.base0D },
    Error        = { fg = colors.base00, bg = colors.base08 },
    ErrorMsg     = { fg = colors.base08, bg = colors.base00, },
    Exception    = { fg = colors.base08 },
    FoldColumn   = { fg = colors.base0C, bg = colors.base00, },
    Folded       = { fg = colors.base03, bg = colors.base01, },
    IncSearch    = { fg = colors.base01, bg = colors.base09, },
    Italic       = { italic = true },
    Macro        = { fg = colors.base08 },
    MatchParen   = { bg = colors.base03 },
    ModeMsg      = { fg = colors.base0B },
    MoreMsg      = { fg = colors.base0B },
    Question     = { fg = colors.base0D },
    Search       = { fg = colors.base01, bg = colors.base0A },
    Substitute   = { fg = colors.base01, bg = colors.base0A },
    SpecialKey   = { fg = colors.base03 },
    TooLong      = { fg = colors.base08 },
    Underlined   = { fg = colors.base08, underline = true },
    Visual       = { bg = colors.base02 },
    VisualNOS    = { fg = colors.base08 },
    WarningMsg   = { fg = colors.base08 },
    WildMenu     = { fg = colors.base08, bg = colors.base0A },
    Title        = { fg = colors.base0D },
    Conceal      = { fg = colors.base0D, bg = colors.base00 },
    Cursor       = { fg = colors.base00, bg = colors.base05 },
    NonText      = { fg = colors.base03 },
    LineNr       = { fg = colors.base04, bg = colors.base00 },
    SignColumn   = { fg = colors.base04, bg = colors.base00 },
    StatusLine   = { fg = colors.base03, bg = colors.base01 },
    StatusLineNC = { fg = colors.base04, bg = colors.base02 },
    WinBar       = { fg = colors.base03 },
    WinBarNC     = { fg = colors.base04 },
    VertSplit    = { fg = colors.base05 },
    ColorColumn  = { bg = colors.base00 },
    CursorColumn = { bg = colors.base00 },
    CursorLine   = { bg = colors.base01 },
    CursorLineNr = { fg = colors.base04, bg = colors.base01 },
    QuickFixLine = { bg = colors.base01 },
    PMenu        = { fg = colors.base06, bg = colors.base01 },
    PMenuSel     = { fg = colors.base06, bg = colors.base02 },
    TabLine      = { fg = colors.base03, bg = colors.base01 },
    TabLineFill  = { fg = colors.base03, bg = colors.base01 },
    TabLineSel   = { fg = colors.base0B, bg = colors.base01 },
    EndOfBuffer  = {},

    Boolean      = { fg = colors.base09 },
    Character    = { fg = colors.base08 },
    Comment      = { fg = colors.base03 },
    Conditional  = { fg = colors.base0E },
    Constant     = { fg = colors.base09 },
    Define       = { fg = colors.base0E },
    Delimiter    = { fg = colors.base05 },
    Float        = {},
    Function     = { fg = colors.base0D },
    Identifier   = { fg = colors.base08 },
    Include      = { fg = colors.base0D },
    Keyword      = { fg = colors.base0E },
    Label        = { fg = colors.base0A },
    Number       = { fg = colors.base09 },
    Operator     = { fg = colors.base05 },
    PreProc      = { fg = colors.base0A },
    Repeat       = { fg = colors.base0A },
    Special      = { fg = colors.base0C },
    SpecialChar  = { fg = colors.base0F },
    Statement    = { fg = colors.base08 },
    StorageClass = { fg = colors.base0A },
    String       = { fg = colors.base0B },
    Structure    = { fg = colors.base0E },
    Tag          = { fg = colors.base0A },
    Todo         = { fg = colors.base0A, bg = colors.base01 },
    Type         = { fg = colors.base0A },
    Typedef      = { fg = colors.base0A },

    -- Diff highlighting
    DiffAdd     = { bg = colors.base01 },
    DiffChange  = { bg = colors.base01 },
    DiffDelete  = { bg = colors.base01 },
    DiffText    = { bg = colors.base01 },
    DiffAdded   = { fg = colors.base0B, bg = colors.base00 },
    DiffFile    = { fg = colors.base08, bg = colors.base00 },
    DiffNewFile = { fg = colors.base0B, bg = colors.base00 },
    DiffLine    = { fg = colors.base0D, bg = colors.base00 },
    DiffRemoved = { fg = colors.base08, bg = colors.base00 },

    -- Git highlighting
    gitcommitOverflow      = { fg = colors.base08 },
    gitcommitSummary       = { fg = colors.base0B },
    gitcommitComment       = { fg = colors.base03 },
    gitcommitUntracked     = { fg = colors.base03 },
    gitcommitDiscarded     = { fg = colors.base03 },
    gitcommitSelected      = { fg = colors.base03 },
    gitcommitHeader        = { fg = colors.base0E },
    gitcommitSelectedType  = { fg = colors.base0D },
    gitcommitUnmergedType  = { fg = colors.base0D },
    gitcommitDiscardedType = { fg = colors.base0D },
    gitcommitBranch        = { fg = colors.base09, bold = true },
    gitcommitUntrackedFile = { fg = colors.base0A },
    gitcommitUnmergedFile  = { fg = colors.base08, bold = true },
    gitcommitDiscardedFile = { fg = colors.base08, bold = true },
    gitcommitSelectedFile  = { fg = colors.base0B, bold = true },

    -- GitGutter highlighting
    GitGutterAdd          = { fg = colors.base0B, bg = colors.base00 },
    GitGutterChange       = { fg = colors.base0D, bg = colors.base00 },
    GitGutterDelete       = { fg = colors.base08, bg = colors.base00 },
    GitGutterChangeDelete = { fg = colors.base0E, bg = colors.base00 },

    -- Spelling highlighting
    SpellBad   = { undercurl = true, sp = colors.base08 },
    SpellLocal = { undercurl = true, sp = colors.base0C },
    SpellCap   = { undercurl = true, sp = colors.base0D },
    SpellRare  = { undercurl = true, sp = colors.base0E },

    DiagnosticError                = { fg = colors.base08 },
    DiagnosticWarn                 = { fg = colors.base0E },
    DiagnosticInfo                 = { fg = colors.base05 },
    DiagnosticHint                 = { fg = colors.base0C },
    DiagnosticUnderlineError       = { undercurl = true, sp = colors.base08 },
    DiagnosticUnderlineWarning     = { undercurl = true, sp = colors.base0E },
    DiagnosticUnderlineWarn        = { undercurl = true, sp = colors.base0E },
    DiagnosticUnderlineInformation = { undercurl = true, sp = colors.base0F },
    DiagnosticUnderlineHint        = { undercurl = true, sp = colors.base0C },

    LspReferenceText                   = { underline = true, sp = colors.base04 },
    LspReferenceRead                   = { underline = true, sp = colors.base04 },
    LspReferenceWrite                  = { underline = true, sp = colors.base04 },
    LspDiagnosticsDefaultError         = { link = "DiagnosticError" },
    LspDiagnosticsDefaultWarning       = { link = "DiagnosticWarn" },
    LspDiagnosticsDefaultInformation   = { link = "DiagnosticInfo" },
    LspDiagnosticsDefaultHint          = { link = "DiagnosticHint" },
    LspDiagnosticsUnderlineError       = { link = "DiagnosticUnderlineError" },
    LspDiagnosticsUnderlineWarning     = { link = "DiagnosticUnderlineWarning" },
    LspDiagnosticsUnderlineInformation = { link = "DiagnosticUnderlineInformation" },
    LspDiagnosticsUnderlineHint        = { link = "DiagnosticUnderlineHint" },

    -- TSAnnotation         = { fg = colors.base0F },
    -- TSAttribute          = { fg = colors.base0A },
    -- TSBoolean            = { fg = colors.base09 },
    -- TSCharacter          = { fg = colors.base08 },
    -- TSConditional        = { fg = colors.base0E },
    -- TSConstBuiltin       = { fg = colors.base09 },
    -- TSConstMacro         = { fg = colors.base08 },
    -- TSConstant           = { fg = colors.base09 },
    -- TSConstructor        = { fg = colors.base0C },
    -- TSCurrentScope       = { bold = true },
    -- TSEmphasis           = { fg = colors.base09 },
    -- TSError              = { fg = "red" },
    -- TSException          = { fg = "red" },
    -- TSField              = { fg = colors.base0D },
    -- TSFieldKey           = { fg = colors.base08 },
    -- TSFloat              = { fg = colors.base09 },
    -- TSFuncBuiltin        = { fg = colors.base0D },
    -- TSFuncMacro          = { fg = colors.base08 },
    -- TSFunction           = { fg = colors.base0D },
    -- TSInclude            = { fg = colors.base0D },
    -- TSKeyword            = { fg = colors.base0E },
    -- TSKeywordFunction    = { fg = colors.base0E },
    -- TSKeywordOperator    = { fg = colors.base0E },
    -- TSLabel              = { fg = colors.base0A },
    -- TSLiteral            = { fg = colors.base09 },
    -- TSMethod             = { fg = colors.base0D },
    -- TSNamespace          = { fg = colors.base08 },
    -- TSNumber             = { fg = colors.base09 },
    -- TSOperator           = { fg = colors.base05 },
    -- TSParameter          = { fg = colors.base08 },
    -- TSParameterReference = { fg = colors.base05 },
    -- TSProperty           = { fg = colors.base08 },
    -- TSPunctBracket       = { fg = colors.base0F },
    -- TSPunctDelimiter     = { fg = colors.base0F },
    -- TSPunctSpecial       = { fg = colors.base08 },
    -- TSRepeat             = { fg = colors.base0E },
    -- TSStrike             = { fg = colors.base00, strikethrough = true },
    -- TSString             = { fg = colors.base0B },
    -- TSStringEscape       = { fg = colors.base0B },
    -- TSStringRegex        = { fg = colors.base0B },
    -- TSStringSpecial      = { fg = colors.base0B },
    -- TSStrong             = { bold = true },
    -- TSStructure          = { fg = colors.base0A },
    -- TSSymbol             = { fg = colors.base0B },
    -- TSTag                = { fg = colors.base0A },
    -- TSTagAttribute       = { fg = colors.base08 },
    -- TSTagDelimiter       = { fg = colors.base0F },
    -- TSText               = { fg = colors.base05 },
    -- TSTitle              = { fg = colors.base0D, bold = true },
    -- TSType               = { fg = colors.base0A },
    -- TSTypeBuiltin        = { fg = colors.base0A },
    -- TSURI                = { fg = colors.base09, underline = true },
    -- TSUnderline          = { fg = colors.base0B, underline = true },
    -- TSVariable           = { fg = colors.base05 },
    -- TSVariableBuiltin    = { fg = colors.base09 },

    TSAnnotation         = { fg = colors.base0F },
    TSAttribute          = { fg = colors.base0A },
    TSBoolean            = { fg = colors.base09 },
    TSCharacter          = { fg = colors.base08 },
    TSComment            = { fg = colors.base03, italic = true },
    TSConstructor        = { fg = colors.base0D },
    TSConditional        = { fg = colors.base0E },
    TSConstant           = { fg = colors.base09 },
    TSConstBuiltin       = { fg = colors.base09, italic = true },
    TSConstMacro         = { fg = colors.base08 },
    TSError              = { fg = colors.base08 },
    TSException          = { fg = colors.base08 },
    TSField              = { fg = colors.base05 },
    TSFloat              = {},
    TSFunction           = { fg = colors.base0D },
    TSFunctionCall       = { fg = colors.base0D },
    TSFuncBuiltin        = { fg = colors.base0D, italic = true },
    TSFuncMacro          = { fg = colors.base08 },
    TSInclude            = { fg = colors.base0D },
    TSKeyword            = { fg = colors.base0E },
    TSKeywordFunction    = { fg = colors.base0E },
    TSKeywordOperator    = { fg = colors.base05 },
    TSLabel              = { fg = colors.base0A },
    TSMethod             = { fg = colors.base0D },
    TSNamespace          = { fg = colors.base08 },
    TSNone               = { fg = colors.base05 },
    TSNumber             = { fg = colors.base09 },
    TSOperator           = { fg = colors.base05 },
    TSParameter          = { fg = colors.base05 },
    TSParameterReference = { fg = colors.base05 },
    TSProperty           = { fg = colors.base05 },
    TSPunctDelimiter     = { fg = colors.base05 },
    TSPunctBracket       = { fg = colors.base05 },
    TSPunctSpecial       = { fg = colors.base05 },
    TSRepeat             = { fg = colors.base0E },
    TSString             = { fg = colors.base0B },
    TSStringRegex        = { fg = colors.base0C },
    TSStringEscape       = { fg = colors.base0C },
    TSSymbol             = { fg = colors.base0B },
    TSTag                = { fg = colors.base0A },
    TSTagDelimiter       = { fg = colors.base05 },
    TSText               = { fg = colors.base05 },
    TSStrong             = { bold = true },
    TSEmphasis           = { fg = colors.base09, italic = true },
    TSUnderline          = { fg = colors.base00, underline = true },
    TSStrike             = { fg = colors.base00, strikethrough = true },
    TSTitle              = { fg = colors.base0D },
    TSLiteral            = { fg = colors.base09 },
    TSURI                = { fg = colors.base09, underline = true },
    TSType               = { fg = colors.base0A },
    TSTypeBuiltin        = { fg = colors.base0A, italic = true },
    TSVariable           = { fg = colors.base08 },
    TSVariableBuiltin    = { fg = colors.base08, italic = true },

    TSDefinition      = { underline = true, sp = colors.base04 },
    TSDefinitionUsage = { underline = true, sp = colors.base04 },
    TSCurrentScope    = { bold = true },

    ["@comment"]               = { link = "TSComment" },
    ["@error"]                 = { link = "TSError" },
    ["@none"]                  = { link = "TSNone" },
    ["@preproc"]               = { link = "PreProc" },
    ["@define"]                = { link = "Define" },
    ["@operator"]              = { link = "TSOperator" },
    ["@punctuation.delimiter"] = { link = "TSPunctDelimiter" },
    ["@punctuation.bracket"]   = { link = "TSPunctBracket" },
    ["@punctuation.special"]   = { link = "TSPunctSpecial" },
    ["@string"]                = { link = "TSString" },
    ["@string.regex"]          = { link = "TSStringRegex" },
    ["@string.escape"]         = { link = "TSStringEscape" },
    ["@string.special"]        = { link = "SpecialChar" },
    ["@character"]             = { link = "TSCharacter" },
    ["@character.special"]     = { link = "SpecialChar" },
    ["@boolean"]               = { link = "TSBoolean" },
    ["@number"]                = { link = "TSNumber" },
    ["@float"]                 = { link = "TSFloat" },
    ["@function"]              = { link = "TSFunction" },
    ["@function.call"]         = { link = "TSFunctionCall" },
    ["@function.builtin"]      = { link = "TSFuncBuiltin" },
    ["@function.macro"]        = { link = "TSFuncMacro" },
    ["@method"]                = { link = "TSMethod" },
    ["@method.call"]           = { link = "TSMethod" },
    ["@constructor"]           = { link = "TSConstructor" },
    ["@parameter"]             = { link = "TSParameter" },
    ["@keyword"]               = { link = "TSKeyword" },
    ["@keyword.function"]      = { link = "TSKeywordFunction" },
    ["@keyword.operator"]      = { link = "TSKeywordOperator" },
    ["@keyword.return"]        = { link = "TSKeyword" },
    ["@conditional"]           = { link = "TSConditional" },
    ["@repeat"]                = { link = "TSRepeat" },
    ["@debug"]                 = { link = "Debug" },
    ["@label"]                 = { link = "TSLabel" },
    ["@include"]               = { link = "TSInclude" },
    ["@exception"]             = { link = "TSException" },
    ["@type"]                  = { link = "TSType" },
    ["@type.builtin"]          = { link = "TSTypeBuiltin" },
    ["@type.qualifier"]        = { link = "TSType" },
    ["@type.definition"]       = { link = "TSType" },
    ["@storageclass"]          = { link = "StorageClass" },
    ["@attribute"]             = { link = "TSAttribute" },
    ["@field"]                 = { link = "TSField" },
    ["@property"]              = { link = "TSProperty" },
    ["@variable"]              = { link = "TSVariable" },
    ["@variable.builtin"]      = { link = "TSVariableBuiltin" },
    ["@constant"]              = { link = "TSConstant" },
    ["@constant.builtin"]      = { link = "TSConstant" },
    ["@constant.macro"]        = { link = "TSConstant" },
    ["@namespace"]             = { link = "TSNamespace" },
    ["@symbol"]                = { link = "TSSymbol" },
    ["@text"]                  = { link = "TSText" },
    ["@text.strong"]           = { link = "TSStrong" },
    ["@text.emphasis"]         = { link = "TSEmphasis" },
    ["@text.underline"]        = { link = "TSUnderline" },
    ["@text.strike"]           = { link = "TSStrike" },
    ["@text.title"]            = { link = "TSTitle" },
    ["@text.literal"]          = { link = "TSLiteral" },
    ["@text.uri"]              = { link = "TSUri" },
    ["@text.math"]             = { link = "Number" },
    ["@text.environment"]      = { link = "Macro" },
    ["@text.environment.name"] = { link = "Type" },
    ["@text.reference"]        = { link = "TSParameterReference" },
    ["@text.todo"]             = { link = "Todo" },
    ["@text.note"]             = { link = "Tag" },
    ["@text.warning"]          = { link = "DiagnosticWarn" },
    ["@text.danger"]           = { link = "DiagnosticError" },
    ["@tag"]                   = { link = "TSTag" },
    ["@tag.attribute"]         = { link = "TSAttribute" },
    ["@tag.delimiter"]         = { link = "TSTagDelimiter" },

    NvimInternalError = { fg = colors.base00, bg = colors.base08 },

    NormalFloat = {},
    FloatBorder = { fg = colors.base05 },
    TermCursor  = { fg = colors.base00, bg = colors.base05 },

    User1 = { fg = colors.base08, bg = colors.base02 },
    User2 = { fg = colors.base0E, bg = colors.base02 },
    User3 = { fg = colors.base05, bg = colors.base02 },
    User4 = { fg = colors.base0C, bg = colors.base02 },
    User5 = { fg = colors.base05, bg = colors.base02 },
    User6 = { fg = colors.base05, bg = colors.base02 },
    User7 = { fg = colors.base05, bg = colors.base02 },
    User8 = { fg = colors.base00, bg = colors.base02 },
    User9 = { fg = colors.base00, bg = colors.base02 },

    TreesitterContext = { bg = colors.base01, italic = true },

    CmpDocumentationBorder   = { fg = colors.base05, bg = colors.base00 },
    CmpDocumentation         = { fg = colors.base05, bg = colors.base00 },
    CmpItemAbbr              = { fg = colors.base05 },
    CmpItemAbbrDeprecated    = { fg = colors.base03, strikethrough = true },
    CmpItemAbbrMatch         = { fg = colors.base0D },
    CmpItemAbbrMatchFuzzy    = { fg = colors.base0D },
    CmpItemKindDefault       = { fg = colors.base05 },
    CmpItemMenu              = { fg = colors.base04 },
    CmpItemKindKeyword       = { fg = colors.base0E },
    CmpItemKindVariable      = { fg = colors.base08 },
    CmpItemKindConstant      = { fg = colors.base09 },
    CmpItemKindReference     = { fg = colors.base08 },
    CmpItemKindValue         = { fg = colors.base09 },
    CmpItemKindFunction      = { fg = colors.base0D },
    CmpItemKindMethod        = { fg = colors.base0D },
    CmpItemKindConstructor   = { fg = colors.base0D },
    CmpItemKindClass         = { fg = colors.base0A },
    CmpItemKindInterface     = { fg = colors.base0A },
    CmpItemKindStruct        = { fg = colors.base0A },
    CmpItemKindEvent         = { fg = colors.base0A },
    CmpItemKindEnum          = { fg = colors.base0A },
    CmpItemKindUnit          = { fg = colors.base0A },
    CmpItemKindModule        = { fg = colors.base05 },
    CmpItemKindProperty      = { fg = colors.base08 },
    CmpItemKindField         = { fg = colors.base08 },
    CmpItemKindTypeParameter = { fg = colors.base0A },
    CmpItemKindEnumMember    = { fg = colors.base0A },
    CmpItemKindOperator      = { fg = colors.base05 },
    CmpItemKindSnippet       = { fg = colors.base04 },

    TelescopeBorder = { link = "FloatBorder" },

  }

  for name, value in pairs(hi_config) do
    vim.api.nvim_set_hl(0, name, value)
  end
end

return M
